package main

import (
	"context"
	"fmt"
	"testing"

	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/spf13/viper"
)

func TestInsert(t *testing.T) {
	viper.AddConfigPath("../../config")
	viper.SetConfigName("local")
	viper.SetConfigType("yaml")
	err := viper.ReadInConfig() // Find and read the config file
	if err != nil {             // Handle errors reading the config file
		panic(fmt.Errorf("Fatal error config file: %w \n", err))
	}
	database := DBConnection(viper.GetString("test_database"))
	defer database.Close()

	_, _ = database.Exec(context.Background(), "TRUNCATE block, event, transaction")

	msg := fixtureMsg()
	rawEvent, _ := decodeEvent(msg)
	block := *rawEvent.PayloadPtr
	block.Sequence = 1

	blockId, _ := Insert(database, block)

	// t.Errorf("got %q, wanted %q", got, want)

	t.Run("block created", func(t *testing.T) {
		blockCount, _ := entriesCount(database, "block")
		if blockId != 77937661 {
			t.Errorf("Wrong block height")
		}
		if blockCount != 1 {
			t.Errorf("Block not inserted")
		}
	})

	t.Run("transactions created", func(t *testing.T) {
		transactionCount, error := entriesCount(database, "transaction")
		if error != nil {
			t.Errorf(error.Error())
		}
		if transactionCount != 1 {
			t.Errorf("Transaction not inserted")
		}
	})

	t.Run("events created", func(t *testing.T) {
		eventCount, error := entriesCount(database, "event")
		fmt.Print(eventCount)
		if error != nil {
			t.Errorf(error.Error())
		}
		if eventCount != 1 {
			t.Errorf("Event not inserted")
		}
	})

}

func TestInsertBlockRollback(t *testing.T) {
	viper.AddConfigPath("../../config")
	viper.SetConfigName("local")
	viper.SetConfigType("yaml")
	err := viper.ReadInConfig() // Find and read the config file
	if err != nil {             // Handle errors reading the config file
		panic(fmt.Errorf("Fatal error config file: %w \n", err))
	}
	database := DBConnection(viper.GetString("test_database"))
	defer database.Close()

	_, _ = database.Exec(context.Background(), "TRUNCATE block, event, transaction")

	msg := fixtureMsg()
	rawEvent, _ := decodeEvent(msg)
	block := *rawEvent.PayloadPtr
	block.Sequence = 1
	// Violate `block_check`
	block.GasLimit = "100000"
	block.GasUsed = "150000"

	_, error := Insert(database, block)
	if error == nil {
		t.Errorf("Should have not inserted block")
	}

	t.Run("block rollback", func(t *testing.T) {
		got, error := entriesCount(database, "block")
		if error != nil {
			t.Errorf(error.Error())
		}
		if got != 0 {
			t.Errorf("got %q, wanted %q", got, 0)
		}
	})

	t.Run("transaction rollback", func(t *testing.T) {
		got, error := entriesCount(database, "transaction")
		if error != nil {
			t.Errorf(error.Error())
		}
		if got != 0 {
			t.Errorf("got %q, wanted %q", got, 0)
		}
	})

	t.Run("events rollback", func(t *testing.T) {
		got, error := entriesCount(database, "event")
		if error != nil {
			t.Errorf(error.Error())
		}
		if got != 0 {
			t.Errorf("got %q, wanted %q", got, 0)
		}
	})
}

func TestInsertTransactionRollback(t *testing.T) {
	viper.AddConfigPath("../../config")
	viper.SetConfigName("local")
	viper.SetConfigType("yaml")
	err := viper.ReadInConfig() // Find and read the config file
	if err != nil {             // Handle errors reading the config file
		panic(fmt.Errorf("Fatal error config file: %w \n", err))
	}
	database := DBConnection(viper.GetString("test_database"))
	defer database.Close()

	_, _ = database.Exec(context.Background(), "TRUNCATE block, event, transaction")

	msg := fixtureMsg()
	rawEvent, _ := decodeEvent(msg)
	block := *rawEvent.PayloadPtr
	block.Sequence = 1

	block.Transactions[0].From = ""

	_, error := Insert(database, block)
	if error == nil {
		t.Errorf("Should have not inserted block")
	}

	t.Run("block rollback", func(t *testing.T) {
		got, error := entriesCount(database, "block")
		if error != nil {
			t.Errorf(error.Error())
		}
		if got != 0 {
			t.Errorf("got %q, wanted %q", got, 0)
		}
	})

	t.Run("transaction rollback", func(t *testing.T) {
		got, error := entriesCount(database, "transaction")
		if error != nil {
			t.Errorf(error.Error())
		}
		if got != 0 {
			t.Errorf("got %q, wanted %q", got, 0)
		}
	})

	t.Run("events rollback", func(t *testing.T) {
		got, error := entriesCount(database, "event")
		if error != nil {
			t.Errorf(error.Error())
		}
		if got != 0 {
			t.Errorf("got %q, wanted %q", got, 0)
		}
	})
}

func TestInsertEventRollback(t *testing.T) {
	viper.AddConfigPath("../../config")
	viper.SetConfigName("local")
	viper.SetConfigType("yaml")
	err := viper.ReadInConfig() // Find and read the config file
	if err != nil {             // Handle errors reading the config file
		panic(fmt.Errorf("Fatal error config file: %w \n", err))
	}
	database := DBConnection(viper.GetString("test_database"))
	defer database.Close()

	_, _ = database.Exec(context.Background(), "TRUNCATE block, event, transaction")

	msg := fixtureMsg()
	rawEvent, _ := decodeEvent(msg)
	block := *rawEvent.PayloadPtr
	block.Sequence = 1

	// Violate `event_topics_check`
	block.Transactions[0].Logs[0].Topics = [][]byte{
		[]byte("000000000000000000000000d3df29d79e10b2a5b91a65a18773dad7e7eec5c4"),
		[]byte("000000000000000000000000d3df29d79e10b2a5b91a65a18773dad7e7eec5c4"),
		[]byte("000000000000000000000000d3df29d79e10b2a5b91a65a18773dad7e7eec5c4"),
		[]byte("000000000000000000000000d3df29d79e10b2a5b91a65a18773dad7e7eec5c4"),
		[]byte("000000000000000000000000d3df29d79e10b2a5b91a65a18773dad7e7eec5c4"),
	}

	_, error := Insert(database, block)
	if error == nil {
		t.Errorf("Should have not inserted")
	}

	t.Run("block rollback", func(t *testing.T) {
		got, error := entriesCount(database, "block")
		if error != nil {
			t.Errorf(error.Error())
		}
		if got != 0 {
			t.Errorf("got %q, wanted %q", got, 0)
		}
	})

	t.Run("transaction rollback", func(t *testing.T) {
		got, error := entriesCount(database, "transaction")
		if error != nil {
			t.Errorf(error.Error())
		}
		if got != 0 {
			t.Errorf("got %q, wanted %q", got, 0)
		}
	})

	t.Run("events rollback", func(t *testing.T) {
		got, error := entriesCount(database, "event")
		if error != nil {
			t.Errorf(error.Error())
		}
		if got != 0 {
			t.Errorf("got %q, wanted %q", got, 0)
		}
	})
}

func fixtureMsg() []byte {
	return []byte{1, 133, 25, 32, 16, 26, 4, 165, 59, 253, 26, 25, 28, 119, 178, 25, 1, 61, 144, 24, 143, 24, 50, 24, 144, 24, 128, 24, 93, 23, 24, 72, 24, 38, 24, 156, 24, 109, 24, 40, 24, 72, 24, 68, 17, 24, 170, 24, 122, 175, 104, 99, 104, 97, 105, 110, 95, 105, 100, 26, 78, 69, 65, 83, 100, 104, 97, 115, 104, 120, 66, 48, 120, 50, 101, 56, 102, 101, 102, 100, 100, 101, 52, 50, 54, 50, 50, 49, 52, 100, 49, 101, 56, 57, 49, 100, 54, 101, 56, 51, 100, 53, 52, 50, 97, 101, 54, 51, 49, 57, 99, 55, 50, 101, 56, 57, 50, 57, 99, 54, 98, 56, 53, 55, 50, 99, 50, 52, 49, 97, 100, 54, 48, 99, 53, 55, 48, 107, 112, 97, 114, 101, 110, 116, 95, 104, 97, 115, 104, 120, 66, 48, 120, 52, 51, 51, 100, 48, 55, 56, 97, 54, 49, 99, 49, 100, 55, 100, 53, 57, 98, 54, 55, 49, 97, 51, 48, 97, 54, 52, 99, 100, 57, 53, 102, 53, 53, 51, 48, 55, 56, 102, 50, 48, 102, 55, 57, 51, 102, 50, 52, 50, 52, 99, 102, 51, 48, 97, 55, 57, 101, 97, 49, 101, 52, 56, 102, 102, 104, 101, 105, 103, 104, 116, 26, 4, 165, 59, 253, 101, 109, 105, 110, 101, 114, 120, 42, 48, 120, 54, 56, 54, 51, 48, 56, 50, 56, 55, 49, 57, 98, 52, 52, 101, 99, 53, 97, 53, 100, 55, 102, 99, 48, 101, 100, 53, 97, 100, 102, 49, 97, 52, 98, 49, 49, 50, 98, 50, 48, 105, 116, 105, 109, 101, 115, 116, 97, 109, 112, 27, 22, 199, 205, 122, 209, 64, 149, 158, 105, 103, 97, 115, 95, 108, 105, 109, 105, 116, 120, 66, 48, 120, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 103, 97, 115, 95, 117, 115, 101, 100, 102, 48, 120, 55, 102, 48, 48, 106, 108, 111, 103, 115, 95, 98, 108, 111, 111, 109, 121, 2, 2, 48, 120, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 100, 115, 105, 122, 101, 101, 48, 120, 50, 49, 55, 113, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 95, 114, 111, 111, 116, 120, 66, 48, 120, 57, 100, 49, 56, 101, 48, 50, 49, 102, 50, 49, 50, 56, 49, 99, 102, 53, 51, 51, 56, 55, 49, 101, 56, 48, 97, 50, 51, 97, 49, 52, 49, 55, 102, 97, 97, 101, 101, 51, 98, 98, 57, 49, 48, 101, 55, 56, 99, 102, 51, 50, 100, 55, 49, 51, 56, 98, 48, 54, 98, 98, 102, 51, 50, 106, 115, 116, 97, 116, 101, 95, 114, 111, 111, 116, 120, 66, 48, 120, 98, 50, 54, 99, 100, 56, 50, 53, 101, 98, 50, 100, 100, 101, 98, 98, 48, 57, 57, 48, 98, 98, 97, 99, 99, 99, 97, 52, 53, 56, 102, 52, 52, 48, 52, 50, 98, 98, 55, 98, 55, 102, 55, 97, 57, 98, 54, 53, 52, 56, 57, 53, 57, 50, 57, 49, 57, 55, 97, 55, 55, 99, 48, 97, 109, 114, 101, 99, 101, 105, 112, 116, 115, 95, 114, 111, 111, 116, 120, 66, 48, 120, 57, 48, 50, 49, 55, 55, 97, 97, 99, 98, 102, 101, 98, 102, 97, 50, 102, 51, 100, 57, 98, 97, 97, 53, 57, 100, 101, 97, 54, 97, 48, 55, 48, 54, 48, 57, 49, 99, 50, 50, 97, 48, 101, 99, 54, 50, 101, 50, 99, 55, 98, 102, 51, 51, 56, 55, 101, 57, 100, 102, 50, 55, 55, 100, 108, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 115, 129, 184, 26, 100, 104, 97, 115, 104, 120, 66, 48, 120, 57, 57, 56, 55, 55, 99, 48, 99, 53, 99, 49, 98, 56, 53, 50, 102, 55, 50, 101, 55, 97, 100, 101, 57, 57, 56, 55, 57, 101, 48, 53, 102, 102, 101, 48, 49, 49, 50, 98, 52, 99, 55, 55, 53, 49, 100, 100, 51, 56, 97, 101, 53, 52, 98, 101, 51, 56, 55, 55, 53, 48, 51, 53, 99, 106, 98, 108, 111, 99, 107, 95, 104, 97, 115, 104, 120, 66, 48, 120, 50, 101, 56, 102, 101, 102, 100, 100, 101, 52, 50, 54, 50, 50, 49, 52, 100, 49, 101, 56, 57, 49, 100, 54, 101, 56, 51, 100, 53, 52, 50, 97, 101, 54, 51, 49, 57, 99, 55, 50, 101, 56, 57, 50, 57, 99, 54, 98, 56, 53, 55, 50, 99, 50, 52, 49, 97, 100, 54, 48, 99, 53, 55, 48, 108, 98, 108, 111, 99, 107, 95, 104, 101, 105, 103, 104, 116, 26, 4, 165, 59, 253, 104, 99, 104, 97, 105, 110, 95, 105, 100, 26, 78, 69, 65, 83, 113, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 95, 105, 110, 100, 101, 120, 0, 100, 102, 114, 111, 109, 120, 42, 48, 120, 101, 99, 101, 101, 56, 53, 48, 55, 100, 57, 50, 98, 57, 97, 98, 57, 100, 97, 48, 97, 102, 98, 102, 55, 57, 52, 102, 49, 101, 54, 101, 49, 51, 55, 49, 55, 48, 56, 57, 57, 98, 116, 111, 120, 42, 48, 120, 50, 51, 48, 49, 56, 50, 97, 100, 51, 101, 50, 49, 49, 52, 52, 99, 99, 48, 57, 49, 53, 49, 52, 98, 51, 97, 99, 48, 102, 53, 101, 57, 52, 98, 56, 57, 50, 53, 97, 55, 101, 110, 111, 110, 99, 101, 102, 48, 120, 54, 54, 99, 49, 105, 103, 97, 115, 95, 112, 114, 105, 99, 101, 99, 48, 120, 48, 105, 103, 97, 115, 95, 108, 105, 109, 105, 116, 103, 48, 120, 102, 52, 53, 49, 53, 104, 103, 97, 115, 95, 117, 115, 101, 100, 25, 127, 0, 120, 24, 109, 97, 120, 95, 112, 114, 105, 111, 114, 105, 116, 121, 95, 102, 101, 101, 95, 112, 101, 114, 95, 103, 97, 115, 99, 48, 120, 48, 111, 109, 97, 120, 95, 102, 101, 101, 95, 112, 101, 114, 95, 103, 97, 115, 99, 48, 120, 48, 101, 118, 97, 108, 117, 101, 99, 48, 120, 48, 101, 105, 110, 112, 117, 116, 152, 164, 24, 120, 24, 152, 24, 224, 24, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 92, 24, 175, 24, 24, 24, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 97, 24, 215, 24, 102, 24, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 24, 78, 24, 69, 24, 65, 24, 82, 24, 47, 24, 85, 24, 83, 24, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 111, 117, 116, 112, 117, 116, 128, 107, 97, 99, 99, 101, 115, 115, 95, 108, 105, 115, 116, 128, 103, 116, 120, 95, 116, 121, 112, 101, 0, 102, 115, 116, 97, 116, 117, 115, 245, 100, 108, 111, 103, 115, 129, 163, 103, 97, 100, 100, 114, 101, 115, 115, 120, 42, 48, 120, 50, 51, 48, 49, 56, 50, 97, 100, 51, 101, 50, 49, 49, 52, 52, 99, 99, 48, 57, 49, 53, 49, 52, 98, 51, 97, 99, 48, 102, 53, 101, 57, 52, 98, 56, 57, 50, 53, 97, 55, 102, 116, 111, 112, 105, 99, 115, 129, 152, 32, 24, 167, 24, 252, 24, 153, 24, 237, 24, 118, 23, 24, 48, 24, 158, 24, 226, 24, 63, 24, 99, 24, 174, 24, 144, 24, 25, 24, 106, 24, 30, 24, 73, 13, 24, 54, 24, 46, 24, 111, 24, 106, 24, 84, 24, 122, 24, 89, 24, 188, 24, 128, 24, 158, 24, 226, 24, 41, 23, 24, 130, 100, 100, 97, 116, 97, 152, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 92, 24, 175, 24, 24, 24, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 97, 24, 215, 24, 102, 24, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 24, 78, 24, 69, 24, 65, 24, 82, 24, 47, 24, 85, 24, 83, 24, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 108, 111, 103, 115, 95, 98, 108, 111, 111, 109, 121, 2, 2, 48, 120, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 112, 99, 111, 110, 116, 114, 97, 99, 116, 95, 97, 100, 100, 114, 101, 115, 115, 246, 97, 118, 26, 156, 138, 130, 202, 97, 114, 120, 66, 48, 120, 49, 49, 50, 56, 49, 101, 55, 101, 51, 100, 52, 54, 51, 53, 50, 54, 51, 48, 99, 55, 99, 98, 53, 56, 99, 49, 56, 56, 53, 100, 99, 98, 52, 57, 49, 53, 56, 100, 56, 57, 98, 97, 50, 102, 52, 52, 48, 50, 101, 52, 54, 100, 100, 48, 51, 52, 50, 99, 55, 98, 53, 98, 51, 49, 97, 115, 120, 66, 48, 120, 51, 99, 54, 51, 49, 56, 55, 97, 101, 57, 97, 52, 57, 51, 100, 55, 55, 101, 98, 50, 50, 54, 55, 97, 53, 97, 54, 55, 56, 50, 52, 51, 102, 98, 50, 53, 56, 98, 57, 57, 99, 49, 55, 48, 101, 53, 48, 54, 54, 48, 101, 54, 51, 54, 54, 51, 52, 48, 55, 99, 54, 98, 101, 49, 109, 110, 101, 97, 114, 95, 109, 101, 116, 97, 100, 97, 116, 97, 161, 108, 114, 101, 99, 101, 105, 112, 116, 95, 104, 97, 115, 104, 120, 44, 55, 85, 49, 52, 120, 84, 107, 89, 107, 78, 52, 69, 112, 83, 74, 118, 116, 105, 99, 66, 117, 111, 117, 103, 51, 72, 77, 99, 87, 120, 111, 51, 80, 55, 50, 83, 101, 114, 120, 51, 119, 101, 68, 49, 109, 110, 101, 97, 114, 95, 109, 101, 116, 97, 100, 97, 116, 97, 161, 109, 69, 120, 105, 115, 116, 105, 110, 103, 66, 108, 111, 99, 107, 163, 105, 110, 101, 97, 114, 95, 104, 97, 115, 104, 120, 44, 50, 118, 89, 112, 105, 67, 83, 103, 117, 65, 82, 105, 81, 66, 119, 78, 90, 109, 102, 69, 122, 56, 71, 115, 103, 116, 75, 122, 105, 107, 51, 82, 82, 50, 77, 66, 101, 102, 107, 116, 50, 65, 72, 55, 112, 110, 101, 97, 114, 95, 112, 97, 114, 101, 110, 116, 95, 104, 97, 115, 104, 120, 44, 56, 75, 107, 110, 83, 71, 70, 99, 116, 56, 119, 51, 107, 71, 86, 89, 70, 115, 120, 71, 113, 85, 103, 55, 69, 83, 88, 103, 98, 119, 89, 106, 50, 107, 116, 70, 121, 67, 77, 67, 67, 119, 53, 84, 102, 97, 117, 116, 104, 111, 114, 120, 25, 115, 104, 97, 114, 100, 108, 97, 98, 115, 46, 112, 111, 111, 108, 46, 102, 56, 54, 51, 57, 55, 51, 46, 109, 48}
}

func entriesCount(database *pgxpool.Pool, table string) (int, error) {
	var amount int
	err := database.QueryRow(context.Background(), fmt.Sprintf("SELECT COUNT(1) FROM %s", table)).Scan(&amount)
	if err != nil {
		return 0, err
	}
	return amount, nil
}
